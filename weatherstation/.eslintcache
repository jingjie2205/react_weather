[{"D:\\react_weather\\weatherstation\\src\\index.js":"1","D:\\react_weather\\weatherstation\\src\\reportWebVitals.js":"2","D:\\react_weather\\weatherstation\\src\\App.js":"3","D:\\react_weather\\weatherstation\\src\\components\\Home.js":"4","D:\\react_weather\\weatherstation\\src\\components\\CovidHome.js":"5","D:\\react_weather\\weatherstation\\src\\components\\NavBar.js":"6","D:\\react_weather\\weatherstation\\src\\components\\Statusbox.js":"7","D:\\react_weather\\weatherstation\\src\\components\\Graph.js":"8","D:\\react_weather\\weatherstation\\src\\components\\Table.js":"9","D:\\react_weather\\weatherstation\\src\\components\\Covidgraph.js":"10","D:\\react_weather\\weatherstation\\src\\components\\WeatherCard.js":"11","D:\\react_weather\\weatherstation\\src\\components\\Map.js":"12"},{"size":534,"mtime":1610720370834,"results":"13","hashOfConfig":"14"},{"size":375,"mtime":1610711958088,"results":"15","hashOfConfig":"14"},{"size":813,"mtime":1611903136778,"results":"16","hashOfConfig":"14"},{"size":7059,"mtime":1611412461632,"results":"17","hashOfConfig":"14"},{"size":5594,"mtime":1611385882862,"results":"18","hashOfConfig":"14"},{"size":1098,"mtime":1611903234323,"results":"19","hashOfConfig":"14"},{"size":629,"mtime":1611257592089,"results":"20","hashOfConfig":"14"},{"size":4236,"mtime":1611257592087,"results":"21","hashOfConfig":"14"},{"size":516,"mtime":1611257592089,"results":"22","hashOfConfig":"14"},{"size":1380,"mtime":1611257592087,"results":"23","hashOfConfig":"14"},{"size":1008,"mtime":1611385095176,"results":"24","hashOfConfig":"14"},{"size":3403,"mtime":1611904677360,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1ui54jj",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\react_weather\\weatherstation\\src\\index.js",[],["56","57"],"D:\\react_weather\\weatherstation\\src\\reportWebVitals.js",[],"D:\\react_weather\\weatherstation\\src\\App.js",["58","59"],"D:\\react_weather\\weatherstation\\src\\components\\Home.js",["60"],"import React, { useState, useEffect } from 'react'\r\nimport \"./style/Home.css\"\r\nimport {MenuItem, FormControl, Select} from \"@material-ui/core\"\r\nimport WeatherCard from \"./WeatherCard\"\r\nimport NavBar from './NavBar';\r\nimport { IoUmbrellaOutline, IoWaterOutline } from 'react-icons/io5';\r\nimport { BiWind } from 'react-icons/bi';\r\n\r\n\r\nconst Home = () => {\r\n    const [lscountries, setLscountries] = useState([]);\r\n    const [country, setCountry] = useState(\"Singapore\");   \r\n    const [description, setDescription] = useState([]); \r\n    const [icon, setIcon] = useState(\"\");\r\n    const [temp, setTemp] = useState(\"\");\r\n\r\n    const [api, setApi] = useState({});\r\n    const [icon2, setIcon2] = useState(\"\");\r\n\r\n    const [api2, setApi2] = useState({});\r\n    const [icon3, setIcon3] = useState(\"\");\r\n\r\n    const [api3, setApi3] = useState({});\r\n    const [icon4, setIcon4] = useState(\"\");\r\n\r\n    const [api4, setApi4] = useState({});\r\n    const [icon5, setIcon5] = useState(\"\");\r\n\r\n    const [api5, setApi5] = useState({});\r\n    const [icon6, setIcon6] = useState(\"\");\r\n\r\n    const [api6, setApi6] = useState({});\r\n    const [icon7, setIcon7] = useState(\"\");\r\n\r\n    const [humid, setHumid] = useState(\"\");\r\n    const [precipitation, setPrecipitation] = useState(\"\");\r\n    const [wind, setWind] = useState(\"\");\r\n\r\n\r\n    //get local country json file \r\n    useEffect(() => {\r\n        // var data = require('D:/weather_react/weatherstation/src/data/countries.json');\r\n        var data = require('../data/countries.json');\r\n        setLscountries(data);\r\n    }, []);\r\n\r\n    //display default value (SG) data\r\n    useEffect(() => {\r\n        fetch(\"https://api.weatherbit.io/v2.0/forecast/daily?city=Singapore&key=349c00f0a1f9440b89703a5fb036c265&days=7\")\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                setDescription(data.data[0].weather.description);\r\n                setIcon(data.data[0].weather.icon);\r\n                setTemp(data.data[0].temp);\r\n\r\n                setApi(data.data[1]);\r\n                setIcon2(data.data[1].weather.icon);\r\n\r\n                setApi2(data.data[2]);\r\n                setIcon3(data.data[2].weather.icon);\r\n\r\n                setApi3(data.data[3]);\r\n                setIcon4(data.data[3].weather.icon);\r\n\r\n\r\n                setApi4(data.data[4]);\r\n                setIcon5(data.data[4].weather.icon);\r\n\r\n                setApi5(data.data[5]);\r\n                setIcon6(data.data[5].weather.icon);\r\n\r\n                setApi6(data.data[6]);\r\n                setIcon7(data.data[6].weather.icon);\r\n\r\n                setHumid(data.data[0].rh);\r\n                setPrecipitation(data.data[0].pop);\r\n                setWind(Math.round(data.data[0].wind_spd));\r\n            })\r\n    }, []);\r\n\r\n    //onchange event handler\r\n    const countrychange = async (evt) => {\r\n    const countryname = evt.target.value;\r\n    setCountry(countryname);\r\n    const url = `https://api.weatherbit.io/v2.0/forecast/daily?city=${countryname}&key=349c00f0a1f9440b89703a5fb036c265&days=7`\r\n    await fetch(url)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            setDescription(data.data[0].weather.description);\r\n            setIcon(data.data[0].weather.icon);\r\n            setTemp(data.data[0].temp);\r\n\r\n            setApi(data.data[1]);\r\n            setIcon2(data.data[1].weather.icon);\r\n\r\n            setApi2(data.data[2]);\r\n            setIcon3(data.data[2].weather.icon);\r\n\r\n            setApi3(data.data[3]);\r\n            setIcon4(data.data[3].weather.icon);\r\n\r\n\r\n            setApi4(data.data[4]);\r\n            setIcon5(data.data[4].weather.icon);\r\n\r\n            setApi5(data.data[5]);\r\n            setIcon6(data.data[5].weather.icon);\r\n\r\n            setApi6(data.data[6]);\r\n            setIcon7(data.data[6].weather.icon);\r\n\r\n            setHumid(data.data[0].rh);\r\n            setPrecipitation(data.data[0].pop);\r\n            setWind(Math.round(data.data[0].wind_spd));\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"background\"></div>\r\n            <NavBar />\r\n            <div className=\"home\" >\r\n                <div className=\"home_mainheader\">\r\n                    <FormControl className=\"country_dropdown\" style={{minWidth: 150}}>\r\n                        <Select \r\n                        variant=\"standard\"\r\n                        value = {country}\r\n                        onChange = {countrychange}>\r\n                            {lscountries.map((country) => (\r\n                                <MenuItem value = {country.country_name}>{country.country_name}</MenuItem>\r\n                            ))}\r\n                        </Select>    \r\n                    </FormControl>\r\n                </div>\r\n                \r\n                \r\n                    <div className=\"home_body\">\r\n                        <div className=\"content_container\">\r\n                            <div className=\"body_main\">\r\n                                <div className = \"main_card\">\r\n                                    <img src={\"images/\" + icon + \".png\"}/>\r\n                                    <h1 className=\"main_description\">{description}</h1>\r\n                                    <h1 className=\"main_temp\">{temp}Â°</h1>\r\n                                </div>\r\n                                <div className=\"main_info\">\r\n                                    <div className=\"main_precipitation\">\r\n                                        <IoUmbrellaOutline size=\"1.5em\"/>\r\n                                        <h5>{precipitation}%</h5>\r\n                                    </div>\r\n                                    <div className=\"main_wind\">\r\n                                        <BiWind size=\"1.5em\" />\r\n                                        <h5>{wind} m/s</h5>\r\n                                    </div>\r\n                                    <div className=\"main_humidity\">\r\n                                        <IoWaterOutline size=\"1.5em\" />\r\n                                        <h5>{humid}%</h5>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>    \r\n                    </div>    \r\n\r\n                    <div className=\"home_footer\">\r\n                        <div className=\"footer_main_container\">\r\n                            <div className=\"footer_main\">\r\n                                <WeatherCard info = {api} icon = {icon2}/>\r\n                                <WeatherCard info = {api2} icon = {icon3}/>\r\n                                <WeatherCard info = {api3} icon = {icon4}/>\r\n                                <WeatherCard info = {api4} icon = {icon5}/>\r\n                                <WeatherCard info = {api5} icon = {icon6}/>\r\n                                <WeatherCard info = {api6} icon = {icon7}/>\r\n                            </div>\r\n                        </div>\r\n                    </div>    \r\n                 \r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Home\r\n","D:\\react_weather\\weatherstation\\src\\components\\CovidHome.js",["61","62","63"],"import \"./style/CovidHome.css\";\r\nimport {MenuItem, FormControl, Select, Card, CardContent} from \"@material-ui/core\"\r\nimport React, { useState, useEffect } from 'react'\r\nimport Statusbox from \"./Statusbox\"\r\nimport Table from \"./Table\"\r\nimport Graph from \"./Graph\"\r\nimport moment from 'moment';\r\nimport { Line } from 'react-chartjs-2'\r\nimport Covidgraph from './Covidgraph'\r\nimport NavBar from './NavBar';\r\n\r\nfunction Covidhome() {\r\n    const [lscountries, setLsCoutries] = useState([]);\r\n    const [country, setCountry] = useState(\"SG\");\r\n    const [apiinfo, setApiinfo] = useState({});\r\n    const [table, setTable] = useState([]);\r\n    const [statustype, setStatustype] = useState(\"Confirmed\");\r\n    var nf = new Intl.NumberFormat();\r\n\r\n    //display default value (SG) data\r\n    useEffect(() => {\r\n        fetch(\"https://api.covid19api.com/country/SG\")\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                const datas = data[data.length-1]\r\n                setApiinfo(datas);\r\n            })\r\n    }, []);\r\n\r\n    //populate menu item\r\n    useEffect(() => {\r\n        const getcountry = async () => {\r\n            await fetch (\"https://api.covid19api.com/summary\")\r\n                .then((response) => response.json())\r\n                .then((data) => {\r\n                const datas = data.Countries\r\n                const countries = datas.map((country) => ({\r\n                    name : country.Country,\r\n                    ISO2 : country.CountryCode,\r\n                }));\r\n                setTable(datas);\r\n                setLsCoutries(countries);\r\n            });\r\n        };\r\n        getcountry();\r\n    }, []);\r\n\r\n    //onclick event to retrieve user input data\r\n    const countrychange = async (evt) => {\r\n        const countryISO2 = evt.target.value;\r\n        setCountry(countryISO2);\r\n\r\n        const url = `https://api.covid19api.com/total/dayone/country/${countryISO2}`\r\n        \r\n            await fetch(url)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setCountry(countryISO2);\r\n                setApiinfo(data[data.length-1]); //retreive the last data of the array\r\n            })\r\n    }\r\n    return (\r\n        <div>\r\n            <div className=\"background2\"/>\r\n                <NavBar />\r\n                    <div>\r\n                        <div className='app_mainheader' >\r\n                            <h1>COVID-19 GRAPH</h1>\r\n                            <div className=\"country_dropdown\">\r\n                                <FormControl style={{minWidth: 150}}>\r\n                                    <Select \r\n                                    variant=\"standard\" \r\n                                    value = {country}\r\n                                    onChange = {countrychange}>\r\n                                        {lscountries.map((country) => (\r\n                                            <MenuItem value = {country.ISO2}>{country.name}</MenuItem>\r\n                                        ))}\r\n                                    </Select>    \r\n                                </FormControl>\r\n                            </div>    \r\n                        </div>\r\n\r\n                        <div className=\"app_mainbody\">\r\n                            <div className = \"app_maincontent\">\r\n                                <div className=\"app_statusbox\">\r\n                                    <Statusbox \r\n                                    isRed\r\n                                    status=\"Total Cases\" \r\n                                    num={nf.format(apiinfo.Confirmed)} \r\n                                    onClick={(e) => setStatustype(\"Confirmed\")}\r\n                                    active={statustype === \"Confirmed\"}\r\n                                    />\r\n\r\n                                    <Statusbox \r\n                                    status=\"Recovered\" \r\n                                    num={nf.format(apiinfo.Recovered)} \r\n                                    onClick={(e) => setStatustype(\"Recovered\")}\r\n                                    active={statustype === \"Recovered\"}/>\r\n\r\n                                    <Statusbox \r\n                                    isDred\r\n                                    status=\"Deaths\" \r\n                                    num={nf.format(apiinfo.Deaths)} \r\n                                    onClick={(e) => setStatustype(\"Deaths\")}\r\n                                    active={statustype === \"Deaths\"}/>\r\n\r\n                                    <Statusbox \r\n                                    isYellow\r\n                                    status=\"Active\" \r\n                                    num={nf.format(apiinfo.Active)} \r\n                                    onClick={(e) => setStatustype(\"Active\")}\r\n                                    active={statustype === \"Active\"}/>\r\n                                </div>\r\n                                <div className=\"app_graph\">\r\n                                    <Graph state = {statustype} country={country}/>\r\n                                </div>\r\n                            </div>    \r\n                            <Card className=\"app_sidebar\">\r\n                                <CardContent>\r\n                                    <h3>Total Cases By Country</h3>\r\n                                    <Table countries={table}/>\r\n                                </CardContent>\r\n                            </Card>    \r\n                        </div>    \r\n                    </div>  \r\n        </div>        \r\n    )\r\n}\r\n\r\nexport default Covidhome\r\n","D:\\react_weather\\weatherstation\\src\\components\\NavBar.js",[],"D:\\react_weather\\weatherstation\\src\\components\\Statusbox.js",[],"D:\\react_weather\\weatherstation\\src\\components\\Graph.js",["64"],"import React , { useState, useEffect } from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\nimport moment from 'moment';\r\n\r\nfunction Graph({state , country}) {\r\n    const confirmed = [];\r\n    const active = [];\r\n    const recovered = [];\r\n    const deaths = [];\r\n    const dates =[];\r\n    const [cases, setCases] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const getcountry = async () => {\r\n            await fetch (`https://api.covid19api.com/total/dayone/country/${country}`)\r\n                .then((response) => response.json())\r\n                .then((data) => {\r\n                    setCases(data);\r\n            });\r\n        };\r\n        \r\n        getcountry();\r\n    }, [country]);\r\n\r\n    cases.map( num => {\r\n        confirmed.push(num.Confirmed);\r\n        active.push(num.Active);\r\n        recovered.push(num.Recovered);\r\n        deaths.push(num.Deaths);\r\n        var date = moment(num.Date).format(\"D MMM\");\r\n        dates.push(date);\r\n    })\r\n    \r\n    if(state === 'Confirmed') {\r\n        return (\r\n            <div>\r\n                <Line \r\n                data = {{\r\n                    labels: dates,\r\n                    datasets: [{\r\n                        label: \"Total Cases\",\r\n                        data : confirmed,\r\n                        backgroundColor: [\r\n                            'rgba(255, 99, 132, 0.2)'\r\n                        ],\r\n                        borderColor: [\r\n                            'rgba(255, 99, 132, 1)',\r\n                        ],\r\n                        borderWidth: 1\r\n                    }]\r\n                }}\r\n                height = {570}\r\n                // width = {500}\r\n                options = {{\r\n                    maintainAspectRatio: false,\r\n                }}/>\r\n            </div>\r\n        )\r\n    } else if (state === 'Active'){\r\n        return (\r\n            <div>\r\n                <Line \r\n                data = {{\r\n                    labels: dates,\r\n                    datasets: [{\r\n                        label: \"Total Active\",\r\n                        data : active,\r\n                        backgroundColor: [\r\n                            'rgba(255, 255, 0, 0.4)'\r\n                        ],\r\n                        borderColor: [\r\n                            'rgba(255, 255, 0, 1)',\r\n                        ],\r\n                        borderWidth: 1\r\n                    }]\r\n                }}\r\n                height = {570}\r\n                // width = {500}\r\n                options = {{\r\n                    maintainAspectRatio: false,\r\n                }}/>\r\n            </div>\r\n        )\r\n    } else if (state === 'Recovered') {\r\n        return (\r\n            <div>\r\n                <Line \r\n                data = {{\r\n                    labels: dates,\r\n                    datasets: [{\r\n                        label: \"Total Recovered\",\r\n                        data : recovered,\r\n                        backgroundColor: [\r\n                            'rgba(0, 255, 0, 0.2)'\r\n                        ],\r\n                        borderColor: [\r\n                            'rgba(0, 255, 0, 0.2)',\r\n                        ],\r\n                        borderWidth: 1\r\n                    }]\r\n                }}\r\n                height = {570}\r\n                // width = {500}\r\n                options = {{\r\n                    maintainAspectRatio: false,\r\n                }}/>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <Line \r\n                data = {{\r\n                    labels: dates,\r\n                    datasets: [{\r\n                        label: \"Total Deaths\",\r\n                        data : deaths,\r\n                        backgroundColor: [\r\n                            'rgba(128, 0, 0, 0.5)'\r\n                        ],\r\n                        borderColor: [\r\n                            'rgba(128, 0, 0, 0.5)',\r\n                        ],\r\n                        borderWidth: 1\r\n                    }]\r\n                }}\r\n                height = {570}\r\n                // // width = {500}\r\n                options = {{\r\n                    maintainAspectRatio: false,\r\n                }}/>\r\n            </div>\r\n        )\r\n    }\r\n  \r\n}\r\n\r\nexport default Graph\r\n","D:\\react_weather\\weatherstation\\src\\components\\Table.js",[],"D:\\react_weather\\weatherstation\\src\\components\\Covidgraph.js",["65"],"import React from 'react'\r\nimport \"./style/Covidgraph.css\"\r\nimport { Line } from 'react-chartjs-2'\r\nimport useSwr from \"swr\";\r\nimport moment from 'moment';\r\n\r\nconst Covidgraph = () => {\r\n    const url = \"https://api.covid19api.com/country/singapore/status/confirmed\";\r\n    const confirmed = [];\r\n    const dates = [];\r\n\r\n    const fetcher = (...args) => fetch(...args).then(response => response.json()); //fetch api\r\n    const {data, error} = useSwr(url, fetcher);\r\n    const datas = data && !error ? data:[];\r\n\r\n    datas.map( data => {\r\n        confirmed.push(data.Cases);\r\n        var date = moment(data.Date).format(\"D MMM\");\r\n        dates.push(date);\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <Line \r\n            data = {{\r\n                labels: dates,\r\n                datasets: [{\r\n                    label: \"Total Cases\",\r\n                    data : confirmed,\r\n                    backgroundColor: [\r\n                        'rgba(255, 99, 132, 0.2)'\r\n                    ],\r\n                    borderColor: [\r\n                        'rgba(255, 99, 132, 1)',\r\n                    ],\r\n                    borderWidth: 1\r\n                }]\r\n            }}\r\n            height = {600}\r\n            width = {500}\r\n            options = {{\r\n                maintainAspectRatio: false,\r\n            }}/>\r\n        </div>\r\n    );\r\n} \r\n\r\nexport default Covidgraph","D:\\react_weather\\weatherstation\\src\\components\\WeatherCard.js",["66","67","68"],"import React from 'react'\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\"\r\nimport moment from 'moment';\r\nimport \"./style/WeatherCard.css\"\r\n\r\nfunction WeatherCard({ info, icon}) {\r\n    const date = moment(info.datetime).format(\"ddd\");\r\n    const low = info.low_temp;\r\n    const high = info.max_temp;\r\n    return (\r\n        <Card style={{ backgroundColor: \"transparent\", border: \"none\", boxShadow: \"none\" }}>\r\n                <div className=\"container_date\">{date}</div>\r\n                {/* <img src={\"https://www.weatherbit.io/static/img/icons/\" + icon + \".png\"}/> */}\r\n                <img src={\"images/\" + icon + \".png\"}/>\r\n                <div className=\"temp_container\">\r\n                    <div className=\"low\">\r\n                        {low}Â°\r\n                    </div>\r\n                    <div className=\"high\">\r\n                        {high}Â°\r\n                    </div>\r\n                </div> \r\n        </Card>                     \r\n    )\r\n}\r\n\r\nexport default WeatherCard\r\n","D:\\react_weather\\weatherstation\\src\\components\\Map.js",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":3,"column":8,"nodeType":"75","messageId":"76","endLine":3,"endColumn":14},{"ruleId":"73","severity":1,"message":"77","line":11,"column":34,"nodeType":"75","messageId":"76","endLine":11,"endColumn":40},{"ruleId":"78","severity":1,"message":"79","line":141,"column":37,"nodeType":"80","endLine":141,"endColumn":75},{"ruleId":"73","severity":1,"message":"81","line":7,"column":8,"nodeType":"75","messageId":"76","endLine":7,"endColumn":14},{"ruleId":"73","severity":1,"message":"82","line":8,"column":10,"nodeType":"75","messageId":"76","endLine":8,"endColumn":14},{"ruleId":"73","severity":1,"message":"83","line":9,"column":8,"nodeType":"75","messageId":"76","endLine":9,"endColumn":18},{"ruleId":"84","severity":1,"message":"85","line":25,"column":20,"nodeType":"86","messageId":"87","endLine":25,"endColumn":22},{"ruleId":"84","severity":1,"message":"85","line":16,"column":21,"nodeType":"86","messageId":"87","endLine":16,"endColumn":23},{"ruleId":"73","severity":1,"message":"88","line":2,"column":16,"nodeType":"75","messageId":"76","endLine":2,"endColumn":27},{"ruleId":"73","severity":1,"message":"89","line":2,"column":29,"nodeType":"75","messageId":"76","endLine":2,"endColumn":39},{"ruleId":"78","severity":1,"message":"79","line":14,"column":17,"nodeType":"80","endLine":14,"endColumn":55},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"no-unused-vars","'NavBar' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'moment' is defined but never used.","'Line' is defined but never used.","'Covidgraph' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'CardContent' is defined but never used.","'Typography' is defined but never used.","no-global-assign","no-unsafe-negation"]